var mongoose = require('mongoose');
var User = require('../models/user');
var jwt = require('jsonwebtoken');
var config = require('../config');


exports.signup = function(req, res, next) {
    
    const name = req.body.name;
    const lastname = req.body.lastname;
    const password = req.body.password;
    const country = req.body.country;
    const gender =  req.body.gender;
    const about = req.body.about;

     console.log(name);
     if ( !name  || !password ) {
        return res.status(422).json({ success: false, message: 'Posted data is not correct or incomplete.' });
     }

    User.findOne({ name: name }, function(err, existingUser) {
        if (err) { res.status(400).json({ success: false, message: 'Error processing request ' + err }); }

        // If user is not unique, return error
        if (existingUser) {
            return res.status(201).json({
                success: false,
                message: 'user already exists.'
            });
        }

        // If no error, create account
        let oUser = new User({
            
            lastname : lastname,
            name : name,
            password: password,
            country: country,
            gender: gender,
            about: about
        });

        oUser.save(function(err, oUser) {
            if (err) { res.status(400).json({ success: false, message: 'Error processing request ' + err }); }
            //    var token;
            //    token = oUser.generateJwt();
                  res.status(201).json({
            //        "token": token,
                success: true,
                message: 'User created successfully, please login to access your account.'
            });
        });
    });
}

exports.login = function(req, res, next) {
    // find the user
    User.findOne({ email: req.body.email }, function(err, user) {
        if (err) { res.status(400).json({ success: false, message: 'Error processing request ' + err }); }
        console.log(user); //this is flaw in the code that without login it is showing user details 
        if (!user) 
        {
            res.status(201).json({ success: false, message: 'Incorrect login credentials.' });
        }
        
        
        else if (user) 
        {
            user.comparePassword(req.body.password, function(err, isMatch) {
                if (isMatch && !err)
                 {
                     // claims is the payload for token here i am giving id email and password 
                     var claims = {
                      scope: "self,admins",
                      _id : user._id,
                      email: user.email,
                      name: user.name
                     }
                    var token = jwt.sign(claims, config.secret, //jwt is signed so that they can be verified that they were generated by you
                         {
                        expiresIn: config.tokenexp  //expiresIn is option in jwt,
                       }
                    );

                    let last_login = user.lastlogin;

                    // login success update last login
                    user.lastlogin = new Date();


                    user.save(function(err) {
                        if (err) { res.status(400).json({ success: false, message: 'Error processing request ' + err }); }

                        res.status(201).json({
                            success: true,
                           // message: {  'userid': user._id, 'firstname1': user.firstname,'lastname': user.lastname, 'lastlogin': last_login, 'email':user.email, 'password':user.password },
                            token: token
                        });
                    });

                    var token = user.generateJwt();
                    res.status(200);
                    res.json({
                      "token" : token,
                     success:true,
                     message: {'userid': user._id }
                   });
                } else {
                    res.status(401).json({ success: false, message: 'Incorrect login credentials.' });
                }
            });
        }
    });
}

exports.authenticate = function(req, res, next) {
    // check header or url parameters or post parameters for token
    var token = req.body.token || req.query.token || req.headers['authorization']; //we are getting token from req.headers['authorization']
     // console.log(token);
    if (token) {   // jwt.verify is for verifying the token  and it return decoded payload if signature is valid
        jwt.verify(token, config.secret, function(err, decoded) {
            if (err) {
                return res.status(201).json({ success: false, message: 'Authenticate token expired, please login again.', errcode: 'exp-token' });
            } else {
               
                req.decoded = decoded;
                console.log(decoded);
                // console.log(decoded._doc.firstname);
                console.log(config.secret);
                

                
                next();
            }
        });
    } else {
        return res.status(201).json({
            success: false,
            message: 'Fatal error, Authenticate token not available.',
            errcode: 'no-token'
        });
    }
}

exports.getuserDetails = function(req, res, next) {
if (!req.decoded._id) {
    res.status(401).json({
      "message" : "UnauthorizedError: private profile"
    });
  } else {
    User
      .findOne({_id:req.decoded._id})
      .exec(function(err, user) {
        res.status(200).json(user);
      });
  }

}

exports.updateUser = function(req, res, next) {
    const firstname = req.body.firstname;
    const lastname = req.body.lastname;
    const email = req.body.email;
    const userusername = req.params.username;
    const image = req.body.username;

    if (!firstname || !lastname || !email || !userusername) {
        return res.status(422).json({ success: false, message: 'Posted data is not correct or incompleted.' });
    } else {
        User.findByusername(userusername).exec(function(err, user) {
            if (err) { res.status(400).json({ success: false, message: 'Error processing request ' + err }); }

            if (user) {
                user.firstname = firstname;
                user.lastname = lastname;
                user.email = email;
            }
            user.save(function(err) {
                if (err) { res.status(400).json({ success: false, message: 'Error processing request ' + err }); }
                res.status(201).json({
                    success: true,
                    message: 'User details updated successfully'
                });
            });
        });
    }
}
